<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rakel&#39;s bolg</title>
  
  <subtitle>Outing myself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/BUGIsOne/"/>
  <updated>2019-09-17T10:28:40.116Z</updated>
  <id>https://github.com/BUGIsOne/</id>
  
  <author>
    <name>Rakel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kmp</title>
    <link href="https://github.com/BUGIsOne/2019/09/17/kmp/"/>
    <id>https://github.com/BUGIsOne/2019/09/17/kmp/</id>
    <published>2019-09-17T07:39:06.000Z</published>
    <updated>2019-09-17T10:28:40.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kmp算法"><a href="#kmp算法" class="headerlink" title="kmp算法"></a>kmp算法</h1><p>参考博客（知乎–海纳）：<a href="https://www.zhihu.com/question/21923021/answer/281346746" target="_blank" rel="noopener">https://www.zhihu.com/question/21923021/answer/281346746</a></p><h2 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h2><p>了解kmp首先了解PMT，PMT中的值是字符串的前缀集合与后缀集合的交集中最长元素的长度。<br>例如：有个字符串：abababca</p><table><thead><tr><th>PMT</th><th>0</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>0</th><th>1</th></tr></thead><tbody><tr><td>index:</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>value:</td><td>a</td><td>b</td><td>a</td><td>b</td><td>a</td><td>b</td><td>c</td><td>a</td></tr></tbody></table><p>为了加快查找速度，设置next数组。假设目标字符串：ababababca，模式子串：abababca，我们要返回匹配的开头下标，若不能匹配则返回 -1。</p><h2 id="1-2-next数组的创建"><a href="#1-2-next数组的创建" class="headerlink" title="1.2 next数组的创建"></a>1.2 next数组的创建</h2><p>0123456789<br><br>ababab<u>a</u>bca <br><br>ababab<u>c</u>a</p><p>i:目标字符串最新一轮没匹配的位置<br><br>j:模式字符串最新一轮没匹配的位置<br><br>如上面的第一轮 i = 6，j = 6；<br><br><br>目标字符串的第 i-j 位，到 i-1 一定与模式字符串的第 0 到 j-1 位相同。又由PMT的性质，知道模式字符串 j 前 PMT[j-1] 位分别与目标字符串 i-j 位到 i-j+PMT[j-1]-1 位（设为情况①），及 i-1-PMT[j-1]+1 位 到 i 位（设为情况②）相同。<br><br><br><br>（这是给以后没耐心的自己看的）：<br><br></p><ul><li>其实不要看公式绕自己，为了知道跳过不再比较的字符数 x，PMT 不是把现在至少匹配的字符串分成相同的前半段和后半段嘛（设这字符串为 str）。<br><br><br>通过现在至少匹配的下标 j-1 = 5，str 的长度为 6（ababab），PMT(j) = PMT(5) = 4（str[0]-str[3] 等于 str[2]-str[5] 由于目标字符串前者已被否定，所以要找后半段），x = 6 - 4 = 2。<br><br><br>好，这时候（心里面）假设目标字符串(排除前两位) i 置2，模式字符串的 j 重新置 0。那得到 str 的后半段是不是就和模式字符串 0-3 位相同。i = 2+4=6，i = 6 （ i 虽然还是 6，但要知道，它还有所动作）；j 就因为模式字符串匹配 4 位，所以 j = 4。<br></li></ul><p>0 1 2 3 4 5 6 7 8 9    (index)<br><br>a b a b a b <u>a</u> b c a <br><br>–&gt; a b a b <u>a</u> b c a</p><h2 id="1-3-总结一下"><a href="#1-3-总结一下" class="headerlink" title="1.3 总结一下"></a>1.3 总结一下</h2><p>要理解 i 与 j 失配，如何找到下一个未知的待匹配位置。正向理解就是例子中，我知道第一个 a 不是目标返回值，那我要找到下一个 a 的位置，再不行再下一个 a 的位置。而 PMT 不只帮我找下一个 a，连带着还能帮我找跟着 a 的下一个 b……甚至是帮我在上一个不尽如人意的结构下，找到下一个最多匹配个数（小于那个不尽如人意结果的字符数）的子串开头位置，让我不用再比较它们，还是继续在目标字串那个待匹配位置继续。<br>至于为什么是让 j 回到 PMT[j-1] 这个值，<strong>就是情况①不行，来试情况②</strong>，只不过目标字串 i 不变，变 j 而已。既然这两个串前 j 位都相同，变 i 变 j 意义都一样，但就”目标”嘛，是等着的那位。</p><table><thead><tr><th>char</th><th>a</th><th>b</th><th>a</th><th>b</th><th>a</th><th>b</th><th>c</th><th>a</th></tr></thead><tbody><tr><td>index</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>PMT</td><td>0</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>0</td><td>1</td></tr><tr><td>next</td><td>-1</td><td>0</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>0</td></tr></tbody></table><p>(next[0] = -1只是为了编程的方便)</p><h2 id="2-1-kmp代码："><a href="#2-1-kmp代码：" class="headerlink" title="2.1 kmp代码："></a>2.1 kmp代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="keyword">char</span> * t, <span class="keyword">char</span> * p)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(next, <span class="number">0</span>, <span class="keyword">sizeof</span>(next));</span><br><span class="line">get_next(p, next);</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="built_in">strlen</span>(t) &amp;&amp; j &lt; <span class="built_in">strlen</span>(p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">-1</span> || t[i] == p[j]) </span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (j == <span class="built_in">strlen</span>(p))</span><br><span class="line">       <span class="keyword">return</span> i - j;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-快速求得next数组"><a href="#2-2-快速求得next数组" class="headerlink" title="2.2 快速求得next数组"></a>2.2 快速求得next数组</h2><p>首先说明next[j]表示j位不匹配，回到的下标值。（至于当时的人为什么想到用这种程序写法，我想了蛮久）因为0位固定死了就是-1，那从1位开始。明确next[j]表示PMT[j-1]。以模式字符串为目标字串，但开头是原模式字串第1位开始（例子的abababca的新目标字串就是bababca），能匹配的最长长度构成此目标字串的PMT,即当前位置的next值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">(<span class="keyword">char</span>* p, <span class="keyword">int</span>* next)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">-1</span>;</span><br><span class="line">next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(i != <span class="built_in">strlen</span>(p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">-1</span> || p[i]==p[j])</span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line">i++;</span><br><span class="line">next[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">j=next[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kmp算法&quot;&gt;&lt;a href=&quot;#kmp算法&quot; class=&quot;headerlink&quot; title=&quot;kmp算法&quot;&gt;&lt;/a&gt;kmp算法&lt;/h1&gt;&lt;p&gt;参考博客（知乎–海纳）：&lt;a href=&quot;https://www.zhihu.com/question/219230
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://github.com/BUGIsOne/categories/algorithm/"/>
    
    
      <category term="kmp" scheme="https://github.com/BUGIsOne/tags/kmp/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/BUGIsOne/2019/09/17/hello-world/"/>
    <id>https://github.com/BUGIsOne/2019/09/17/hello-world/</id>
    <published>2019-09-17T06:26:46.848Z</published>
    <updated>2019-09-17T06:26:46.848Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
